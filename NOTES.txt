unsplash.com
fontawesome.com



 
import { useParams } from "react-router-dom";
import React, { useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { spotsActions } from "../../store/spots";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faStar as emptyStar } from "@fortawesome/free-regular-svg-icons";
import { faStarHalfAlt as halfStar } from "@fortawesome/free-solid-svg-icons";
import { faStar as fullStar } from "@fortawesome/free-solid-svg-icons";

function SpotDetails({ isLoaded }) {
  const { spotId } = useParams();
  const dispatch = useDispatch();
  const currentSpot = useSelector((state) => state.spots.spotDetails);

  function reserveSpot(e) {
    e.preventDefault();
    window.alert("NULL");
  }

  useEffect(() => {
    dispatch(spotsActions.fetchSpotDetails(spotId));
  }, [dispatch, spotId]);

  const renderStars = (avgRating) => {
    const starTotal = 5;
    let stars = [];

    const wholeStars = Math.floor(avgRating);
    for (let i = 0; i < wholeStars; i++) {
      stars.push(
        <FontAwesomeIcon key={i} icon={fullStar} style={{ color: "#fc642d" }} />
      );
    }

    const remainder = avgRating - wholeStars;
    if (remainder >= 0.25 && remainder < 0.75) {
      stars.push(
        <FontAwesomeIcon
          key={stars.length}
          icon={halfStar}
          style={{ color: "#fc642d" }}
        />
      );
    } else if (remainder >= 0.75) {
      stars.push(
        <FontAwesomeIcon
          key={stars.length}
          icon={fullStar}
          style={{ color: "#fc642d" }}
        />
      );
    } else {
      stars.push(
        <FontAwesomeIcon
          key={stars.length}
          icon={emptyStar}
          style={{ color: "#fc642d" }}
        />
      );
    }

    const remainderStars = starTotal - stars.length;
    for (let i = 0; i < remainderStars; i++) {
      stars.push(
        <FontAwesomeIcon
          key={stars.length}
          icon={emptyStar}
          style={{ color: "#fc642d" }}
        />
      );
    }

    return stars;
  };

  return isLoaded && currentSpot ? (
    <div>
      <h1>Spot Details</h1>
      <p>{currentSpot.name}</p>
      <p>
        {currentSpot.city}, {currentSpot.state}, {currentSpot.country}
      </p>
      {currentSpot.SpotImages.map((image) => (
        <img
          src={image.url}
          alt={currentSpot.name}
          key={image.id}
          style={{ height: "300px", width: "300px" }}
        />
      ))}
      <p>{currentSpot.description}</p>

      <div className="reserve-container">
        <p>${currentSpot.price} night</p>
        <button onClick={reserveSpot}>Reserve</button>
        {currentSpot.avgStarRating === null ? (
          <p className="spot-new">New</p>
        ) : (
          <div className="stars-container">
            {renderStars(currentSpot.avgStarRating)}
            {currentSpot.avgStarRating}
          </div>
        )}
      </div>
      {currentSpot.numReviews === 0 ? (
        <p>No reviews</p>
      ) : (
        <div>
          <h2>Reviews</h2>
          {currentSpot.SpotReviews.map((review) => (
            <div key={review.id}>
              <p>{review.title}</p>
          
              {renderStars(review.rating)}
            </div>
          ))}
        </div>
      )}
    </div>
  ) : (
    <h1>Loading...</h1>
  );
}
export default SpotDetails;


//


  function reserveSpot(e) {
    e.preventDefault();
    window.alert("feature coming soon!");
  }